plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

allprojects {
    apply plugin: 'java'

    group = 'net.bonn2'
    version = '2.4.4'

    repositories {
        mavenCentral()
        maven {
            name = 'spigot'
            url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
        }
        maven {
            name = 'papermc-repo'
            url = 'https://repo.papermc.io/repository/maven-public/'
        }
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/groups/public/'
        }
        maven {
            name = 'eldonexus'
            url = 'https://eldonexus.de/repository/maven-public/'
        }
        maven {
            name = 'dmulloy2-repo'
            url = 'https://repo.dmulloy2.net/repository/public/'
        }
    }
}

dependencies {
    implementation project(':versions')
    implementation 'org.jetbrains:annotations:24.0.1'
    shadow 'org.reflections:reflections:0.10.2'
    compileOnly 'org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT'
    compileOnly 'nl.pim16aap2:BigDoors:0.1.8.46'
    compileOnly 'net.dmulloy2:ProtocolLib:5.3.0'
}

java {
    sourceCompatibility = "11"
    targetCompatibility = "11"
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

def mainProjects = [':', ':versions', ':versions:v1_16_3', ':versions:v1_19', ':versions:v1_19_3', ':versions:v1_20_2-spigot', ':versions:v1_20_2']
tasks.register('oneJar', Jar) {
    archiveClassifier = 'versioned'
    dependsOn mainProjects.collect { it + ":compileJava" }

    from files(mainProjects.collect { project(it).sourceSets.main.output })
}

shadowJar {
    archiveClassifier = 'shadowed'
    exclude 'javax/**', 'org/jetbrains/**', 'org/slf4j/**'
    relocate 'org.reflections', 'net.bonn2.bigdoorsphysics.relocated.org.reflections'
    relocate 'javassist', 'net.bonn2.bigdoorsphysics.relocated.javassist'
    minimize()
}

tasks.register('mergeJars',  Jar) {
    dependsOn 'shadowJar', 'oneJar'

    duplicatesStrategy = 'exclude'
    from zipTree(shadowJar.archivePath)
    from zipTree(oneJar.archivePath)
    archiveClassifier = ''
}

tasks.named('build') {
    finalizedBy mergeJars
}